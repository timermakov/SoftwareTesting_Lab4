/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 68130.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 2.0], [1.3, 2.0], [1.4, 2.0], [1.5, 2.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 3.0], [2.7, 3.0], [2.8, 3.0], [2.9, 3.0], [3.0, 3.0], [3.1, 3.0], [3.2, 3.0], [3.3, 3.0], [3.4, 3.0], [3.5, 3.0], [3.6, 3.0], [3.7, 4.0], [3.8, 4.0], [3.9, 4.0], [4.0, 4.0], [4.1, 4.0], [4.2, 4.0], [4.3, 4.0], [4.4, 4.0], [4.5, 4.0], [4.6, 4.0], [4.7, 4.0], [4.8, 5.0], [4.9, 5.0], [5.0, 5.0], [5.1, 5.0], [5.2, 5.0], [5.3, 5.0], [5.4, 5.0], [5.5, 5.0], [5.6, 5.0], [5.7, 5.0], [5.8, 5.0], [5.9, 6.0], [6.0, 6.0], [6.1, 6.0], [6.2, 6.0], [6.3, 6.0], [6.4, 6.0], [6.5, 6.0], [6.6, 6.0], [6.7, 6.0], [6.8, 6.0], [6.9, 6.0], [7.0, 6.0], [7.1, 7.0], [7.2, 7.0], [7.3, 7.0], [7.4, 7.0], [7.5, 7.0], [7.6, 7.0], [7.7, 7.0], [7.8, 7.0], [7.9, 7.0], [8.0, 8.0], [8.1, 8.0], [8.2, 8.0], [8.3, 8.0], [8.4, 8.0], [8.5, 8.0], [8.6, 8.0], [8.7, 8.0], [8.8, 8.0], [8.9, 9.0], [9.0, 9.0], [9.1, 9.0], [9.2, 9.0], [9.3, 9.0], [9.4, 9.0], [9.5, 9.0], [9.6, 9.0], [9.7, 9.0], [9.8, 10.0], [9.9, 10.0], [10.0, 10.0], [10.1, 10.0], [10.2, 10.0], [10.3, 10.0], [10.4, 11.0], [10.5, 11.0], [10.6, 11.0], [10.7, 11.0], [10.8, 11.0], [10.9, 11.0], [11.0, 11.0], [11.1, 12.0], [11.2, 12.0], [11.3, 12.0], [11.4, 12.0], [11.5, 12.0], [11.6, 13.0], [11.7, 13.0], [11.8, 13.0], [11.9, 13.0], [12.0, 14.0], [12.1, 14.0], [12.2, 14.0], [12.3, 14.0], [12.4, 14.0], [12.5, 14.0], [12.6, 15.0], [12.7, 15.0], [12.8, 15.0], [12.9, 15.0], [13.0, 15.0], [13.1, 16.0], [13.2, 16.0], [13.3, 16.0], [13.4, 16.0], [13.5, 17.0], [13.6, 17.0], [13.7, 17.0], [13.8, 18.0], [13.9, 18.0], [14.0, 18.0], [14.1, 18.0], [14.2, 19.0], [14.3, 19.0], [14.4, 20.0], [14.5, 21.0], [14.6, 22.0], [14.7, 23.0], [14.8, 25.0], [14.9, 67.0], [15.0, 75.0], [15.1, 76.0], [15.2, 113.0], [15.3, 120.0], [15.4, 124.0], [15.5, 128.0], [15.6, 130.0], [15.7, 131.0], [15.8, 132.0], [15.9, 132.0], [16.0, 133.0], [16.1, 134.0], [16.2, 135.0], [16.3, 364.0], [16.4, 384.0], [16.5, 395.0], [16.6, 401.0], [16.7, 410.0], [16.8, 416.0], [16.9, 427.0], [17.0, 439.0], [17.1, 448.0], [17.2, 458.0], [17.3, 469.0], [17.4, 484.0], [17.5, 497.0], [17.6, 510.0], [17.7, 537.0], [17.8, 544.0], [17.9, 558.0], [18.0, 579.0], [18.1, 597.0], [18.2, 624.0], [18.3, 643.0], [18.4, 654.0], [18.5, 672.0], [18.6, 691.0], [18.7, 712.0], [18.8, 732.0], [18.9, 762.0], [19.0, 782.0], [19.1, 811.0], [19.2, 845.0], [19.3, 863.0], [19.4, 883.0], [19.5, 898.0], [19.6, 963.0], [19.7, 1023.0], [19.8, 1105.0], [19.9, 1144.0], [20.0, 1228.0], [20.1, 1314.0], [20.2, 1453.0], [20.3, 1598.0], [20.4, 1622.0], [20.5, 1729.0], [20.6, 1805.0], [20.7, 1927.0], [20.8, 1965.0], [20.9, 2098.0], [21.0, 2288.0], [21.1, 2308.0], [21.2, 2460.0], [21.3, 2686.0], [21.4, 2818.0], [21.5, 2876.0], [21.6, 2902.0], [21.7, 2917.0], [21.8, 3047.0], [21.9, 3174.0], [22.0, 3276.0], [22.1, 3397.0], [22.2, 3400.0], [22.3, 3405.0], [22.4, 3463.0], [22.5, 3637.0], [22.6, 3936.0], [22.7, 3949.0], [22.8, 3958.0], [22.9, 4076.0], [23.0, 4132.0], [23.1, 4272.0], [23.2, 4372.0], [23.3, 4374.0], [23.4, 4405.0], [23.5, 4449.0], [23.6, 4471.0], [23.7, 4509.0], [23.8, 4511.0], [23.9, 4513.0], [24.0, 4549.0], [24.1, 4558.0], [24.2, 4558.0], [24.3, 4559.0], [24.4, 4561.0], [24.5, 4633.0], [24.6, 4640.0], [24.7, 4650.0], [24.8, 4734.0], [24.9, 4765.0], [25.0, 4768.0], [25.1, 4770.0], [25.2, 4820.0], [25.3, 4851.0], [25.4, 4852.0], [25.5, 4887.0], [25.6, 4934.0], [25.7, 5047.0], [25.8, 5115.0], [25.9, 5115.0], [26.0, 5116.0], [26.1, 5116.0], [26.2, 5117.0], [26.3, 5120.0], [26.4, 5121.0], [26.5, 5126.0], [26.6, 5147.0], [26.7, 5149.0], [26.8, 5153.0], [26.9, 5162.0], [27.0, 5198.0], [27.1, 5202.0], [27.2, 5204.0], [27.3, 5205.0], [27.4, 5205.0], [27.5, 5206.0], [27.6, 5207.0], [27.7, 5209.0], [27.8, 5216.0], [27.9, 5223.0], [28.0, 5224.0], [28.1, 5226.0], [28.2, 5227.0], [28.3, 5229.0], [28.4, 5275.0], [28.5, 5279.0], [28.6, 5287.0], [28.7, 5289.0], [28.8, 5290.0], [28.9, 5332.0], [29.0, 5339.0], [29.1, 5341.0], [29.2, 5342.0], [29.3, 5343.0], [29.4, 5345.0], [29.5, 5346.0], [29.6, 5348.0], [29.7, 5383.0], [29.8, 5397.0], [29.9, 5430.0], [30.0, 5435.0], [30.1, 5437.0], [30.2, 5438.0], [30.3, 5440.0], [30.4, 5440.0], [30.5, 5468.0], [30.6, 5469.0], [30.7, 5469.0], [30.8, 5472.0], [30.9, 5474.0], [31.0, 5475.0], [31.1, 5484.0], [31.2, 5489.0], [31.3, 5492.0], [31.4, 5496.0], [31.5, 5497.0], [31.6, 5498.0], [31.7, 5532.0], [31.8, 5534.0], [31.9, 5534.0], [32.0, 5535.0], [32.1, 5535.0], [32.2, 5610.0], [32.3, 5614.0], [32.4, 5614.0], [32.5, 5616.0], [32.6, 5618.0], [32.7, 5621.0], [32.8, 5681.0], [32.9, 5683.0], [33.0, 5688.0], [33.1, 5701.0], [33.2, 5704.0], [33.3, 5705.0], [33.4, 5707.0], [33.5, 5711.0], [33.6, 5720.0], [33.7, 5811.0], [33.8, 5826.0], [33.9, 5831.0], [34.0, 5863.0], [34.1, 5937.0], [34.2, 6065.0], [34.3, 6076.0], [34.4, 6078.0], [34.5, 6082.0], [34.6, 6085.0], [34.7, 6088.0], [34.8, 6090.0], [34.9, 6092.0], [35.0, 6125.0], [35.1, 6126.0], [35.2, 6178.0], [35.3, 6211.0], [35.4, 6212.0], [35.5, 6244.0], [35.6, 6441.0], [35.7, 6442.0], [35.8, 6470.0], [35.9, 6476.0], [36.0, 6488.0], [36.1, 6490.0], [36.2, 6493.0], [36.3, 6495.0], [36.4, 6496.0], [36.5, 6515.0], [36.6, 6517.0], [36.7, 6534.0], [36.8, 6536.0], [36.9, 6543.0], [37.0, 6545.0], [37.1, 6628.0], [37.2, 6770.0], [37.3, 6771.0], [37.4, 6790.0], [37.5, 6790.0], [37.6, 6791.0], [37.7, 6794.0], [37.8, 6803.0], [37.9, 6806.0], [38.0, 6808.0], [38.1, 6810.0], [38.2, 6812.0], [38.3, 6817.0], [38.4, 6819.0], [38.5, 6830.0], [38.6, 6833.0], [38.7, 6834.0], [38.8, 6849.0], [38.9, 6939.0], [39.0, 6948.0], [39.1, 6950.0], [39.2, 6961.0], [39.3, 6962.0], [39.4, 6963.0], [39.5, 6965.0], [39.6, 6968.0], [39.7, 6986.0], [39.8, 6990.0], [39.9, 6997.0], [40.0, 7008.0], [40.1, 7009.0], [40.2, 7011.0], [40.3, 7012.0], [40.4, 7014.0], [40.5, 7015.0], [40.6, 7016.0], [40.7, 7019.0], [40.8, 7019.0], [40.9, 7020.0], [41.0, 7020.0], [41.1, 7021.0], [41.2, 7023.0], [41.3, 7025.0], [41.4, 7026.0], [41.5, 7028.0], [41.6, 7031.0], [41.7, 7032.0], [41.8, 7042.0], [41.9, 7043.0], [42.0, 7044.0], [42.1, 7045.0], [42.2, 7046.0], [42.3, 7047.0], [42.4, 7048.0], [42.5, 7048.0], [42.6, 7048.0], [42.7, 7049.0], [42.8, 7049.0], [42.9, 7050.0], [43.0, 7050.0], [43.1, 7052.0], [43.2, 7052.0], [43.3, 7052.0], [43.4, 7053.0], [43.5, 7053.0], [43.6, 7053.0], [43.7, 7054.0], [43.8, 7054.0], [43.9, 7055.0], [44.0, 7056.0], [44.1, 7057.0], [44.2, 7057.0], [44.3, 7058.0], [44.4, 7058.0], [44.5, 7062.0], [44.6, 7063.0], [44.7, 7064.0], [44.8, 7064.0], [44.9, 7065.0], [45.0, 7066.0], [45.1, 7067.0], [45.2, 7068.0], [45.3, 7068.0], [45.4, 7070.0], [45.5, 7071.0], [45.6, 7071.0], [45.7, 7071.0], [45.8, 7072.0], [45.9, 7072.0], [46.0, 7073.0], [46.1, 7073.0], [46.2, 7074.0], [46.3, 7075.0], [46.4, 7075.0], [46.5, 7075.0], [46.6, 7076.0], [46.7, 7077.0], [46.8, 7078.0], [46.9, 7079.0], [47.0, 7080.0], [47.1, 7081.0], [47.2, 7081.0], [47.3, 7081.0], [47.4, 7082.0], [47.5, 7083.0], [47.6, 7084.0], [47.7, 7085.0], [47.8, 7086.0], [47.9, 7087.0], [48.0, 7088.0], [48.1, 7089.0], [48.2, 7089.0], [48.3, 7091.0], [48.4, 7093.0], [48.5, 7094.0], [48.6, 7095.0], [48.7, 7096.0], [48.8, 7096.0], [48.9, 7097.0], [49.0, 7098.0], [49.1, 7098.0], [49.2, 7099.0], [49.3, 7101.0], [49.4, 7102.0], [49.5, 7104.0], [49.6, 7104.0], [49.7, 7104.0], [49.8, 7106.0], [49.9, 7106.0], [50.0, 7107.0], [50.1, 7107.0], [50.2, 7108.0], [50.3, 7108.0], [50.4, 7108.0], [50.5, 7109.0], [50.6, 7109.0], [50.7, 7110.0], [50.8, 7110.0], [50.9, 7111.0], [51.0, 7112.0], [51.1, 7112.0], [51.2, 7113.0], [51.3, 7118.0], [51.4, 7121.0], [51.5, 7123.0], [51.6, 7124.0], [51.7, 7125.0], [51.8, 7125.0], [51.9, 7126.0], [52.0, 7126.0], [52.1, 7127.0], [52.2, 7128.0], [52.3, 7129.0], [52.4, 7130.0], [52.5, 7131.0], [52.6, 7131.0], [52.7, 7132.0], [52.8, 7134.0], [52.9, 7135.0], [53.0, 7137.0], [53.1, 7140.0], [53.2, 7146.0], [53.3, 7147.0], [53.4, 7147.0], [53.5, 7149.0], [53.6, 7150.0], [53.7, 7151.0], [53.8, 7152.0], [53.9, 7153.0], [54.0, 7155.0], [54.1, 7156.0], [54.2, 7157.0], [54.3, 7157.0], [54.4, 7158.0], [54.5, 7160.0], [54.6, 7160.0], [54.7, 7161.0], [54.8, 7162.0], [54.9, 7164.0], [55.0, 7165.0], [55.1, 7166.0], [55.2, 7167.0], [55.3, 7169.0], [55.4, 7170.0], [55.5, 7170.0], [55.6, 7170.0], [55.7, 7171.0], [55.8, 7171.0], [55.9, 7172.0], [56.0, 7176.0], [56.1, 7177.0], [56.2, 7179.0], [56.3, 7180.0], [56.4, 7183.0], [56.5, 7185.0], [56.6, 7192.0], [56.7, 7194.0], [56.8, 7195.0], [56.9, 7197.0], [57.0, 7198.0], [57.1, 7201.0], [57.2, 7221.0], [57.3, 7222.0], [57.4, 7223.0], [57.5, 7223.0], [57.6, 7224.0], [57.7, 7226.0], [57.8, 7226.0], [57.9, 7227.0], [58.0, 7228.0], [58.1, 7229.0], [58.2, 7230.0], [58.3, 7230.0], [58.4, 7232.0], [58.5, 7232.0], [58.6, 7235.0], [58.7, 7239.0], [58.8, 7245.0], [58.9, 7246.0], [59.0, 7247.0], [59.1, 7249.0], [59.2, 7251.0], [59.3, 7253.0], [59.4, 7261.0], [59.5, 7262.0], [59.6, 7296.0], [59.7, 7345.0], [59.8, 7387.0], [59.9, 7399.0], [60.0, 7401.0], [60.1, 7402.0], [60.2, 7409.0], [60.3, 7421.0], [60.4, 7474.0], [60.5, 7475.0], [60.6, 7478.0], [60.7, 7478.0], [60.8, 7484.0], [60.9, 7558.0], [61.0, 7561.0], [61.1, 7563.0], [61.2, 7565.0], [61.3, 7566.0], [61.4, 7630.0], [61.5, 7637.0], [61.6, 7678.0], [61.7, 7680.0], [61.8, 7682.0], [61.9, 7839.0], [62.0, 7846.0], [62.1, 8101.0], [62.2, 8131.0], [62.3, 8133.0], [62.4, 8134.0], [62.5, 8181.0], [62.6, 8199.0], [62.7, 8231.0], [62.8, 8242.0], [62.9, 8250.0], [63.0, 8371.0], [63.1, 8375.0], [63.2, 8375.0], [63.3, 8376.0], [63.4, 8378.0], [63.5, 8382.0], [63.6, 8422.0], [63.7, 8565.0], [63.8, 8568.0], [63.9, 8599.0], [64.0, 8603.0], [64.1, 8605.0], [64.2, 8607.0], [64.3, 8748.0], [64.4, 8785.0], [64.5, 8786.0], [64.6, 8787.0], [64.7, 8788.0], [64.8, 8789.0], [64.9, 8791.0], [65.0, 8793.0], [65.1, 8797.0], [65.2, 8891.0], [65.3, 8920.0], [65.4, 8925.0], [65.5, 8927.0], [65.6, 8929.0], [65.7, 8937.0], [65.8, 8951.0], [65.9, 8953.0], [66.0, 9023.0], [66.1, 9053.0], [66.2, 9075.0], [66.3, 9085.0], [66.4, 9096.0], [66.5, 9100.0], [66.6, 9106.0], [66.7, 9122.0], [66.8, 9123.0], [66.9, 9127.0], [67.0, 9135.0], [67.1, 9173.0], [67.2, 9174.0], [67.3, 9183.0], [67.4, 9185.0], [67.5, 9234.0], [67.6, 9503.0], [67.7, 9509.0], [67.8, 9510.0], [67.9, 9512.0], [68.0, 9523.0], [68.1, 9528.0], [68.2, 9587.0], [68.3, 9591.0], [68.4, 9593.0], [68.5, 9598.0], [68.6, 9652.0], [68.7, 9737.0], [68.8, 9786.0], [68.9, 9880.0], [69.0, 9971.0], [69.1, 10145.0], [69.2, 10392.0], [69.3, 10397.0], [69.4, 10442.0], [69.5, 10479.0], [69.6, 10532.0], [69.7, 10547.0], [69.8, 10556.0], [69.9, 10566.0], [70.0, 10590.0], [70.1, 10593.0], [70.2, 10595.0], [70.3, 10598.0], [70.4, 10666.0], [70.5, 10670.0], [70.6, 10671.0], [70.7, 10672.0], [70.8, 10677.0], [70.9, 10718.0], [71.0, 10745.0], [71.1, 10829.0], [71.2, 10830.0], [71.3, 10831.0], [71.4, 10831.0], [71.5, 10835.0], [71.6, 10868.0], [71.7, 10870.0], [71.8, 10896.0], [71.9, 10900.0], [72.0, 11060.0], [72.1, 11064.0], [72.2, 11065.0], [72.3, 11068.0], [72.4, 11184.0], [72.5, 11185.0], [72.6, 11186.0], [72.7, 11226.0], [72.8, 11374.0], [72.9, 11378.0], [73.0, 11381.0], [73.1, 11385.0], [73.2, 11408.0], [73.3, 11419.0], [73.4, 11559.0], [73.5, 11754.0], [73.6, 11853.0], [73.7, 11923.0], [73.8, 12093.0], [73.9, 12095.0], [74.0, 12099.0], [74.1, 12139.0], [74.2, 12146.0], [74.3, 12158.0], [74.4, 12385.0], [74.5, 12610.0], [74.6, 12759.0], [74.7, 13283.0], [74.8, 13285.0], [74.9, 13370.0], [75.0, 13387.0], [75.1, 13428.0], [75.2, 13430.0], [75.3, 13432.0], [75.4, 13434.0], [75.5, 13435.0], [75.6, 13476.0], [75.7, 13495.0], [75.8, 13514.0], [75.9, 13526.0], [76.0, 13551.0], [76.1, 13587.0], [76.2, 13629.0], [76.3, 13711.0], [76.4, 13917.0], [76.5, 13923.0], [76.6, 14030.0], [76.7, 14467.0], [76.8, 14473.0], [76.9, 14665.0], [77.0, 14666.0], [77.1, 14926.0], [77.2, 15676.0], [77.3, 15724.0], [77.4, 15912.0], [77.5, 15975.0], [77.6, 16127.0], [77.7, 16200.0], [77.8, 16210.0], [77.9, 16287.0], [78.0, 16291.0], [78.1, 16291.0], [78.2, 16294.0], [78.3, 16615.0], [78.4, 17489.0], [78.5, 17837.0], [78.6, 18083.0], [78.7, 18195.0], [78.8, 18222.0], [78.9, 18264.0], [79.0, 18283.0], [79.1, 18288.0], [79.2, 18292.0], [79.3, 18294.0], [79.4, 18306.0], [79.5, 18313.0], [79.6, 18315.0], [79.7, 18318.0], [79.8, 18335.0], [79.9, 18342.0], [80.0, 18363.0], [80.1, 18369.0], [80.2, 18379.0], [80.3, 18541.0], [80.4, 18591.0], [80.5, 18784.0], [80.6, 18795.0], [80.7, 18846.0], [80.8, 18876.0], [80.9, 18881.0], [81.0, 18949.0], [81.1, 19537.0], [81.2, 19543.0], [81.3, 20494.0], [81.4, 20543.0], [81.5, 21118.0], [81.6, 21151.0], [81.7, 21216.0], [81.8, 21241.0], [81.9, 21251.0], [82.0, 21268.0], [82.1, 21271.0], [82.2, 21273.0], [82.3, 21278.0], [82.4, 21321.0], [82.5, 21352.0], [82.6, 21361.0], [82.7, 21556.0], [82.8, 21612.0], [82.9, 21635.0], [83.0, 21648.0], [83.1, 21675.0], [83.2, 21714.0], [83.3, 21724.0], [83.4, 21737.0], [83.5, 21740.0], [83.6, 21742.0], [83.7, 21747.0], [83.8, 21777.0], [83.9, 21787.0], [84.0, 21795.0], [84.1, 21805.0], [84.2, 21809.0], [84.3, 21811.0], [84.4, 21821.0], [84.5, 21827.0], [84.6, 21850.0], [84.7, 21851.0], [84.8, 21853.0], [84.9, 21862.0], [85.0, 21873.0], [85.1, 21889.0], [85.2, 21894.0], [85.3, 21896.0], [85.4, 21897.0], [85.5, 21899.0], [85.6, 21903.0], [85.7, 21933.0], [85.8, 21982.0], [85.9, 22069.0], [86.0, 22082.0], [86.1, 22204.0], [86.2, 22223.0], [86.3, 22330.0], [86.4, 22333.0], [86.5, 22341.0], [86.6, 22346.0], [86.7, 22368.0], [86.8, 22386.0], [86.9, 22392.0], [87.0, 22398.0], [87.1, 22438.0], [87.2, 22443.0], [87.3, 22484.0], [87.4, 23070.0], [87.5, 23532.0], [87.6, 23566.0], [87.7, 23763.0], [87.8, 23904.0], [87.9, 23949.0], [88.0, 23953.0], [88.1, 24553.0], [88.2, 24619.0], [88.3, 24742.0], [88.4, 24857.0], [88.5, 24862.0], [88.6, 24877.0], [88.7, 24956.0], [88.8, 25048.0], [88.9, 25051.0], [89.0, 25154.0], [89.1, 25190.0], [89.2, 25226.0], [89.3, 25250.0], [89.4, 25254.0], [89.5, 25262.0], [89.6, 25295.0], [89.7, 25325.0], [89.8, 25355.0], [89.9, 25391.0], [90.0, 25395.0], [90.1, 25400.0], [90.2, 25405.0], [90.3, 25416.0], [90.4, 25433.0], [90.5, 25502.0], [90.6, 25543.0], [90.7, 25556.0], [90.8, 25670.0], [90.9, 25757.0], [91.0, 25793.0], [91.1, 25796.0], [91.2, 25809.0], [91.3, 25902.0], [91.4, 25917.0], [91.5, 25978.0], [91.6, 26161.0], [91.7, 26526.0], [91.8, 27032.0], [91.9, 27523.0], [92.0, 28218.0], [92.1, 28220.0], [92.2, 28251.0], [92.3, 28297.0], [92.4, 28357.0], [92.5, 28483.0], [92.6, 28734.0], [92.7, 28770.0], [92.8, 28779.0], [92.9, 28807.0], [93.0, 28849.0], [93.1, 28949.0], [93.2, 28959.0], [93.3, 29042.0], [93.4, 29278.0], [93.5, 29303.0], [93.6, 29457.0], [93.7, 30435.0], [93.8, 31282.0], [93.9, 31637.0], [94.0, 31758.0], [94.1, 31940.0], [94.2, 31986.0], [94.3, 32068.0], [94.4, 32311.0], [94.5, 32341.0], [94.6, 32566.0], [94.7, 33433.0], [94.8, 34661.0], [94.9, 35820.0], [95.0, 36786.0], [95.1, 39669.0], [95.2, 40746.0], [95.3, 41345.0], [95.4, 41490.0], [95.5, 42605.0], [95.6, 42880.0], [95.7, 43623.0], [95.8, 46428.0], [95.9, 46433.0], [96.0, 46435.0], [96.1, 46461.0], [96.2, 46507.0], [96.3, 46507.0], [96.4, 46508.0], [96.5, 46512.0], [96.6, 46515.0], [96.7, 49810.0], [96.8, 49814.0], [96.9, 49824.0], [97.0, 49992.0], [97.1, 49996.0], [97.2, 49998.0], [97.3, 50004.0], [97.4, 52098.0], [97.5, 52104.0], [97.6, 52108.0], [97.7, 52215.0], [97.8, 55484.0], [97.9, 55497.0], [98.0, 55502.0], [98.1, 55689.0], [98.2, 59194.0], [98.3, 59209.0], [98.4, 59211.0], [98.5, 59286.0], [98.6, 60594.0], [98.7, 60637.0], [98.8, 60646.0], [98.9, 60696.0], [99.0, 62685.0], [99.1, 62691.0], [99.2, 62696.0], [99.3, 62701.0], [99.4, 64093.0], [99.5, 64123.0], [99.6, 64167.0], [99.7, 64216.0], [99.8, 67623.0], [99.9, 67755.0], [100.0, 68130.0]], "isOverall": false, "label": "configuration_3", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1511.0, "series": [{"data": [[0.0, 1511.0], [100.0, 117.0], [33300.0, 1.0], [32900.0, 2.0], [34100.0, 1.0], [33700.0, 1.0], [35700.0, 1.0], [36100.0, 2.0], [36500.0, 1.0], [40100.0, 1.0], [39700.0, 1.0], [40900.0, 1.0], [40500.0, 1.0], [41300.0, 1.0], [42100.0, 1.0], [41700.0, 1.0], [42900.0, 1.0], [44100.0, 1.0], [43700.0, 2.0], [43300.0, 1.0], [46500.0, 48.0], [52100.0, 27.0], [60500.0, 5.0], [59700.0, 5.0], [62500.0, 3.0], [64100.0, 29.0], [300.0, 31.0], [400.0, 92.0], [500.0, 59.0], [600.0, 55.0], [700.0, 38.0], [800.0, 47.0], [900.0, 18.0], [1000.0, 11.0], [1100.0, 17.0], [1200.0, 13.0], [1300.0, 9.0], [1400.0, 8.0], [1500.0, 6.0], [1600.0, 9.0], [1700.0, 18.0], [1800.0, 6.0], [1900.0, 15.0], [2000.0, 11.0], [2100.0, 7.0], [2300.0, 13.0], [2200.0, 6.0], [2400.0, 6.0], [2500.0, 6.0], [2600.0, 3.0], [2800.0, 20.0], [2700.0, 3.0], [2900.0, 24.0], [3000.0, 6.0], [3100.0, 6.0], [3200.0, 10.0], [3300.0, 14.0], [3400.0, 34.0], [3700.0, 1.0], [3600.0, 2.0], [3900.0, 30.0], [4000.0, 16.0], [4300.0, 25.0], [4200.0, 6.0], [4100.0, 6.0], [68100.0, 8.0], [4600.0, 30.0], [4500.0, 77.0], [4400.0, 33.0], [4800.0, 44.0], [4700.0, 38.0], [5100.0, 133.0], [5000.0, 7.0], [4900.0, 9.0], [5300.0, 99.0], [5200.0, 178.0], [5600.0, 90.0], [5500.0, 59.0], [5400.0, 177.0], [5800.0, 42.0], [5700.0, 56.0], [6100.0, 24.0], [6000.0, 80.0], [5900.0, 9.0], [6200.0, 30.0], [6300.0, 1.0], [6600.0, 6.0], [6400.0, 92.0], [6500.0, 65.0], [6900.0, 113.0], [6800.0, 104.0], [6700.0, 64.0], [7100.0, 781.0], [7000.0, 932.0], [7400.0, 90.0], [7300.0, 34.0], [7200.0, 252.0], [7500.0, 52.0], [7600.0, 44.0], [7900.0, 2.0], [7800.0, 26.0], [8100.0, 51.0], [8000.0, 1.0], [8600.0, 37.0], [8500.0, 28.0], [8400.0, 7.0], [8300.0, 66.0], [8200.0, 31.0], [8700.0, 85.0], [9200.0, 12.0], [9100.0, 93.0], [9000.0, 54.0], [8900.0, 68.0], [8800.0, 13.0], [9700.0, 28.0], [9600.0, 2.0], [9500.0, 99.0], [9300.0, 2.0], [9400.0, 3.0], [10100.0, 7.0], [10200.0, 2.0], [9800.0, 2.0], [9900.0, 11.0], [10000.0, 6.0], [10400.0, 28.0], [10500.0, 71.0], [10600.0, 51.0], [10300.0, 15.0], [10700.0, 19.0], [11100.0, 29.0], [11000.0, 42.0], [10900.0, 8.0], [10800.0, 87.0], [11200.0, 8.0], [11500.0, 4.0], [11400.0, 21.0], [11300.0, 42.0], [11600.0, 2.0], [11700.0, 9.0], [12200.0, 2.0], [12100.0, 31.0], [12000.0, 30.0], [11900.0, 2.0], [11800.0, 16.0], [12700.0, 2.0], [12600.0, 9.0], [12500.0, 2.0], [12300.0, 13.0], [12400.0, 1.0], [12800.0, 2.0], [13200.0, 24.0], [13100.0, 1.0], [12900.0, 1.0], [13300.0, 19.0], [13700.0, 5.0], [13500.0, 35.0], [13800.0, 8.0], [13400.0, 68.0], [13600.0, 16.0], [13900.0, 13.0], [14000.0, 13.0], [14200.0, 2.0], [14700.0, 3.0], [14600.0, 18.0], [14500.0, 1.0], [14400.0, 19.0], [15000.0, 1.0], [14900.0, 7.0], [15600.0, 6.0], [15700.0, 9.0], [16200.0, 52.0], [16100.0, 12.0], [16000.0, 1.0], [15900.0, 25.0], [17200.0, 1.0], [17000.0, 1.0], [16800.0, 1.0], [17400.0, 1.0], [16600.0, 7.0], [16400.0, 1.0], [17600.0, 3.0], [18200.0, 64.0], [18400.0, 2.0], [17800.0, 13.0], [18000.0, 12.0], [18800.0, 32.0], [18600.0, 1.0], [19200.0, 1.0], [20400.0, 4.0], [20200.0, 1.0], [20800.0, 1.0], [21000.0, 1.0], [20600.0, 1.0], [21400.0, 7.0], [21200.0, 75.0], [22400.0, 27.0], [22200.0, 14.0], [22000.0, 21.0], [21800.0, 149.0], [21600.0, 39.0], [23000.0, 1.0], [23400.0, 1.0], [22800.0, 2.0], [22600.0, 1.0], [23600.0, 1.0], [24000.0, 2.0], [25400.0, 39.0], [25200.0, 52.0], [25000.0, 22.0], [24800.0, 27.0], [24600.0, 12.0], [26000.0, 1.0], [26600.0, 1.0], [26200.0, 1.0], [25800.0, 19.0], [25600.0, 16.0], [27000.0, 7.0], [27400.0, 1.0], [28400.0, 4.0], [28200.0, 32.0], [28600.0, 1.0], [29200.0, 11.0], [29600.0, 1.0], [29400.0, 5.0], [29000.0, 9.0], [28800.0, 19.0], [29800.0, 1.0], [30000.0, 1.0], [30600.0, 1.0], [30400.0, 2.0], [30200.0, 1.0], [31400.0, 6.0], [31600.0, 5.0], [31000.0, 2.0], [31200.0, 1.0], [30800.0, 1.0], [31800.0, 4.0], [32000.0, 15.0], [32400.0, 4.0], [32600.0, 1.0], [34400.0, 1.0], [32800.0, 1.0], [34000.0, 1.0], [33600.0, 1.0], [35200.0, 1.0], [36800.0, 1.0], [40800.0, 5.0], [39600.0, 1.0], [40000.0, 1.0], [42800.0, 12.0], [42400.0, 1.0], [42000.0, 1.0], [41600.0, 1.0], [41200.0, 1.0], [44400.0, 1.0], [43600.0, 1.0], [43200.0, 1.0], [46400.0, 35.0], [50000.0, 11.0], [52000.0, 3.0], [55600.0, 4.0], [59200.0, 27.0], [59600.0, 1.0], [62400.0, 3.0], [64000.0, 1.0], [34700.0, 1.0], [33100.0, 1.0], [34300.0, 1.0], [33900.0, 1.0], [33500.0, 1.0], [35900.0, 1.0], [35500.0, 1.0], [36700.0, 1.0], [35100.0, 5.0], [37900.0, 6.0], [37100.0, 1.0], [40700.0, 1.0], [40300.0, 2.0], [39900.0, 1.0], [42700.0, 1.0], [42300.0, 1.0], [41100.0, 1.0], [41500.0, 1.0], [44300.0, 1.0], [43500.0, 1.0], [43100.0, 1.0], [49900.0, 34.0], [53500.0, 1.0], [55500.0, 13.0], [59100.0, 13.0], [59900.0, 3.0], [63100.0, 6.0], [62700.0, 6.0], [67700.0, 4.0], [17100.0, 1.0], [17300.0, 1.0], [16700.0, 1.0], [16500.0, 4.0], [18100.0, 4.0], [18300.0, 84.0], [18700.0, 23.0], [18500.0, 21.0], [18900.0, 3.0], [19500.0, 23.0], [20700.0, 1.0], [20500.0, 10.0], [21100.0, 15.0], [21500.0, 9.0], [21300.0, 24.0], [20900.0, 2.0], [22300.0, 81.0], [21900.0, 30.0], [22500.0, 2.0], [22100.0, 7.0], [21700.0, 85.0], [23500.0, 21.0], [23300.0, 1.0], [23100.0, 1.0], [22900.0, 2.0], [22700.0, 2.0], [23900.0, 25.0], [23700.0, 14.0], [24500.0, 8.0], [25500.0, 22.0], [25100.0, 12.0], [24900.0, 14.0], [25300.0, 46.0], [24700.0, 10.0], [26100.0, 15.0], [25900.0, 23.0], [26500.0, 1.0], [25700.0, 24.0], [27100.0, 1.0], [26700.0, 1.0], [27500.0, 9.0], [27300.0, 1.0], [26900.0, 5.0], [28100.0, 1.0], [28500.0, 5.0], [28300.0, 16.0], [27900.0, 1.0], [29500.0, 2.0], [29300.0, 8.0], [28900.0, 18.0], [28700.0, 29.0], [29100.0, 5.0], [30100.0, 1.0], [29700.0, 1.0], [30500.0, 1.0], [30300.0, 1.0], [30700.0, 1.0], [31700.0, 6.0], [31500.0, 3.0], [31100.0, 1.0], [30900.0, 1.0], [31900.0, 16.0], [32500.0, 7.0], [32300.0, 15.0], [34600.0, 1.0], [33400.0, 1.0], [33000.0, 2.0], [34200.0, 1.0], [35800.0, 4.0], [36200.0, 1.0], [36600.0, 1.0], [37000.0, 1.0], [40200.0, 1.0], [40600.0, 1.0], [41400.0, 10.0], [42600.0, 1.0], [42200.0, 1.0], [41800.0, 1.0], [41000.0, 1.0], [43000.0, 1.0], [44600.0, 1.0], [43800.0, 2.0], [49800.0, 32.0], [52200.0, 6.0], [55400.0, 18.0], [60600.0, 26.0], [62600.0, 31.0], [64200.0, 4.0], [67600.0, 15.0]], "isOverall": false, "label": "configuration_3", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 68100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9861.0, "series": [{"data": [[0.0, 124.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 15.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 9861.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 86.94478527607357, "minX": 1.71293196E12, "maxY": 500.0, "series": [{"data": [[1.71293202E12, 500.0], [1.7129322E12, 287.3170603674535], [1.71293226E12, 86.94478527607357], [1.71293208E12, 477.3346394984329], [1.71293214E12, 414.5723684210529], [1.71293196E12, 277.4161451814762]], "isOverall": false, "label": "configuration_3_users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71293226E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 12.875, "minX": 1.0, "maxY": 64170.0, "series": [{"data": [[2.0, 436.0], [3.0, 485.0], [4.0, 573.0], [5.0, 639.0], [6.0, 584.8], [7.0, 528.5], [8.0, 725.6666666666666], [9.0, 647.0], [10.0, 646.0], [11.0, 635.5], [12.0, 636.0], [13.0, 639.0], [14.0, 718.3333333333334], [15.0, 712.3333333333334], [16.0, 626.5], [17.0, 633.0], [18.0, 620.0], [19.0, 836.75], [20.0, 815.5], [21.0, 915.6666666666666], [22.0, 779.5], [23.0, 1103.0], [24.0, 1310.3333333333333], [25.0, 820.6666666666666], [26.0, 1062.0], [27.0, 1062.0], [28.0, 679.5], [29.0, 809.0], [30.0, 566.3333333333334], [31.0, 794.0], [33.0, 1112.4444444444443], [32.0, 1792.0], [34.0, 758.0], [35.0, 914.5], [36.0, 713.0], [37.0, 944.6], [38.0, 681.0], [39.0, 404.5], [40.0, 402.5], [41.0, 1544.5], [42.0, 405.0], [43.0, 411.5], [44.0, 1384.6], [45.0, 950.6666666666666], [46.0, 1324.8], [47.0, 1174.5], [48.0, 1327.8], [49.0, 435.0], [50.0, 1190.0], [51.0, 436.5], [52.0, 1794.0], [53.0, 445.3333333333333], [54.0, 1235.0], [55.0, 1693.6666666666665], [56.0, 455.25], [57.0, 434.0], [58.0, 2173.8571428571427], [59.0, 1201.2], [60.0, 1622.125], [61.0, 2137.4], [62.0, 462.6666666666667], [63.0, 470.3333333333333], [64.0, 1859.625], [65.0, 1389.6], [66.0, 1742.2857142857142], [67.0, 1449.6], [68.0, 1685.1666666666665], [69.0, 492.3333333333333], [70.0, 1748.4], [71.0, 1301.3333333333335], [72.0, 2106.222222222222], [73.0, 503.6666666666667], [74.0, 1107.75], [75.0, 1552.8333333333335], [76.0, 1478.6], [77.0, 1581.5], [78.0, 1312.8333333333333], [80.0, 1219.111111111111], [81.0, 1758.4285714285716], [82.0, 2127.222222222222], [83.0, 1686.0], [84.0, 571.8], [85.0, 1701.4], [86.0, 590.5], [87.0, 2352.625], [88.0, 1535.6666666666667], [89.0, 2894.181818181818], [90.0, 1175.4], [91.0, 646.0], [92.0, 1343.0], [93.0, 636.0], [94.0, 1733.2499999999998], [95.0, 1894.6666666666665], [96.0, 2256.1428571428573], [97.0, 670.0], [98.0, 2785.428571428571], [99.0, 691.6666666666666], [100.0, 2549.7], [101.0, 704.25], [102.0, 2925.5], [103.0, 2289.0], [104.0, 739.0], [105.0, 1659.25], [106.0, 2778.1111111111113], [107.0, 2113.8571428571427], [108.0, 3419.133333333333], [109.0, 2067.0], [110.0, 793.4], [111.0, 2530.6666666666665], [112.0, 2271.0], [113.0, 850.0], [114.0, 2098.5], [115.0, 3038.0], [116.0, 3060.8888888888887], [117.0, 2275.285714285714], [118.0, 3084.8888888888887], [119.0, 995.6], [121.0, 1939.0], [122.0, 1048.0], [123.0, 2946.6], [120.0, 5677.0], [124.0, 1057.2], [126.0, 3835.928571428571], [127.0, 8248.0], [128.0, 3240.4285714285716], [133.0, 2356.181818181818], [132.0, 8246.0], [131.0, 8245.333333333334], [130.0, 8243.333333333334], [140.0, 2033.4444444444446], [143.0, 4585.0], [142.0, 4573.8], [141.0, 4588.8], [139.0, 4558.0], [138.0, 4559.0], [137.0, 4557.5], [136.0, 4594.25], [149.0, 6937.5], [148.0, 6173.666666666667], [147.0, 5787.0], [146.0, 5557.8], [145.0, 4640.0], [154.0, 3786.4499999999994], [159.0, 6554.857142857143], [157.0, 4819.8], [156.0, 4851.0], [155.0, 4851.0], [153.0, 9966.0], [152.0, 7804.0], [167.0, 7844.0], [166.0, 6530.333333333333], [165.0, 6365.25], [163.0, 7262.0], [161.0, 6860.0], [160.0, 7838.0], [175.0, 5483.0], [174.0, 6209.090909090909], [173.0, 6213.0], [170.0, 6213.0], [169.0, 6212.4], [168.0, 6211.714285714286], [181.0, 5537.888888888889], [182.0, 5280.62962962963], [183.0, 5025.061224489797], [180.0, 5477.0], [179.0, 5438.666666666667], [178.0, 5440.333333333333], [177.0, 5450.75], [176.0, 5454.333333333333], [184.0, 4331.142857142858], [191.0, 6441.0], [189.0, 6439.0], [188.0, 5698.428571428572], [187.0, 5397.0], [186.0, 5397.666666666667], [185.0, 5472.2], [198.0, 6453.0], [196.0, 6474.5], [195.0, 6482.0], [194.0, 6465.0], [193.0, 6450.6], [192.0, 5507.166666666666], [205.0, 6114.208333333334], [207.0, 6325.571428571428], [206.0, 4471.0], [204.0, 5338.4], [203.0, 10203.941176470587], [202.0, 6490.375], [200.0, 6487.772727272727], [215.0, 8786.333333333334], [214.0, 8790.125], [213.0, 8789.777777777777], [212.0, 8791.0], [210.0, 8790.75], [209.0, 8786.166666666666], [208.0, 5005.875000000001], [222.0, 8788.8], [221.0, 8790.5], [220.0, 8791.57142857143], [219.0, 8794.666666666668], [218.0, 8776.333333333334], [217.0, 8784.857142857141], [216.0, 8788.8], [231.0, 11381.25], [230.0, 11380.0], [229.0, 11376.833333333334], [228.0, 11376.5], [227.0, 11374.0], [226.0, 11385.714285714286], [225.0, 11385.2], [224.0, 11377.5], [238.0, 8602.857142857143], [237.0, 8599.533333333333], [236.0, 13498.222222222223], [235.0, 15975.25], [234.0, 8565.75], [233.0, 10790.0], [232.0, 11774.823529411762], [243.0, 8367.440000000002], [244.0, 7448.274509803924], [247.0, 6089.538461538462], [246.0, 6092.692307692309], [245.0, 6089.0], [242.0, 20875.833333333332], [241.0, 14926.0], [240.0, 9922.187500000002], [255.0, 10076.142857142857], [254.0, 5115.5], [253.0, 5116.0], [252.0, 5116.0], [251.0, 5118.0], [249.0, 5115.571428571429], [248.0, 8181.564102564104], [269.0, 23949.25], [259.0, 8513.666666666666], [262.0, 7658.049999999999], [261.0, 6953.508474576272], [260.0, 5115.0], [270.0, 16529.214285714286], [268.0, 23950.999999999996], [267.0, 12964.96], [266.0, 10631.4], [264.0, 5652.500000000001], [263.0, 11799.739130434784], [258.0, 5115.0], [256.0, 5116.0], [286.0, 20790.222222222223], [279.0, 11649.071428571428], [272.0, 9509.999999999998], [274.0, 11303.000000000002], [273.0, 9509.0], [287.0, 23202.428571428572], [285.0, 19537.076923076922], [284.0, 15259.6], [283.0, 13430.0], [282.0, 13431.75], [281.0, 13434.25], [278.0, 16496.17391304348], [277.0, 18184.666666666668], [276.0, 13514.42857142857], [302.0, 7817.086956521738], [303.0, 9525.0], [301.0, 7564.181818181818], [300.0, 7566.5], [299.0, 7565.5], [298.0, 9904.72222222222], [297.0, 13365.384615384615], [296.0, 10661.600000000002], [295.0, 13030.882352941177], [289.0, 11185.625], [288.0, 11226.4], [291.0, 11186.0], [290.0, 11185.0], [294.0, 11840.5], [293.0, 11371.833333333334], [292.0, 11240.5], [318.0, 17943.5625], [319.0, 9128.760330578514], [317.0, 9936.235294117647], [316.0, 21792.0], [315.0, 18409.285714285714], [314.0, 8257.594594594597], [313.0, 7015.272727272728], [312.0, 5602.5], [311.0, 5542.656250000001], [306.0, 12486.545454545454], [305.0, 11325.8], [310.0, 5535.166666666666], [309.0, 5534.0], [308.0, 18528.4], [334.0, 15020.090909090908], [335.0, 15198.8], [333.0, 14893.0], [332.0, 11999.272727272728], [330.0, 13202.57142857143], [329.0, 15639.333333333334], [328.0, 11096.125], [327.0, 7157.624999999999], [321.0, 14642.666666666668], [320.0, 14115.73333333333], [323.0, 6622.0], [322.0, 4732.5], [326.0, 4768.428571428572], [325.0, 4763.625], [324.0, 4735.0], [351.0, 10831.0], [336.0, 10350.815533980582], [343.0, 15412.666666666666], [342.0, 14137.818181818184], [341.0, 13544.5], [340.0, 14604.625], [345.0, 12724.303030303032], [350.0, 10831.0], [349.0, 10811.5], [348.0, 10808.2], [339.0, 13628.0], [338.0, 14957.25], [337.0, 14991.473684210525], [347.0, 10756.0], [346.0, 10712.5], [344.0, 14871.769230769229], [355.0, 5203.8], [363.0, 8421.406779661012], [365.0, 7848.876404494382], [367.0, 5147.5], [360.0, 5206.818181818182], [359.0, 5205.0], [358.0, 5204.571428571428], [354.0, 5205.333333333333], [353.0, 5206.75], [352.0, 9894.083333333332], [382.0, 9469.0], [381.0, 13192.306451612903], [371.0, 12106.645161290322], [370.0, 5152.333333333333], [369.0, 5152.5], [368.0, 5149.833333333332], [383.0, 47036.75], [379.0, 39880.85714285714], [378.0, 30688.61538461539], [377.0, 28904.0], [376.0, 9030.0], [375.0, 52109.0], [374.0, 18151.666666666668], [373.0, 5821.0], [372.0, 5826.0], [396.0, 105.29166666666666], [398.0, 132.04761904761907], [399.0, 132.42857142857142], [397.0, 122.05000000000001], [395.0, 82.82352941176474], [394.0, 104.0], [388.0, 61427.66666666666], [385.0, 56984.2], [384.0, 57351.56250000001], [387.0, 59961.666666666664], [386.0, 60230.24691358023], [412.0, 53391.33333333335], [414.0, 49848.8], [415.0, 49926.625], [413.0, 50781.83333333335], [409.0, 61520.5], [408.0, 62399.7], [407.0, 64170.0], [401.0, 118.0], [400.0, 130.85714285714286], [403.0, 10804.333333333334], [402.0, 124.27777777777779], [406.0, 62407.7], [405.0, 63294.5], [404.0, 60653.0], [430.0, 7074.8], [424.0, 13875.592592592591], [425.0, 10503.480519480523], [431.0, 7087.678571428572], [429.0, 12919.538461538461], [428.0, 15790.812499999998], [427.0, 13247.156626506023], [426.0, 11474.386363636364], [423.0, 18562.27777777778], [417.0, 21720.0], [416.0, 47709.65853658537], [419.0, 17327.04761904762], [418.0, 21514.4], [422.0, 15949.85714285714], [421.0, 7108.666666666667], [420.0, 7116.511111111113], [446.0, 21825.0], [445.0, 9232.576086956517], [447.0, 21529.083333333336], [444.0, 18003.449999999993], [443.0, 7034.904761904762], [442.0, 7041.25], [441.0, 7002.000000000001], [440.0, 7870.214285714284], [439.0, 18146.407407407412], [433.0, 17756.0], [432.0, 11806.342105263158], [435.0, 7081.444444444444], [434.0, 14657.173913043473], [438.0, 19946.176470588238], [437.0, 7083.928571428571], [436.0, 7084.0], [461.0, 7840.0], [462.0, 10339.27659574468], [460.0, 11052.749999999998], [451.0, 7128.142857142858], [450.0, 7131.363636363637], [449.0, 8491.355555555556], [448.0, 21710.53846153846], [459.0, 6101.666666666666], [458.0, 16846.457142857143], [457.0, 15.0], [456.0, 15.0], [455.0, 14.937500000000002], [454.0, 11113.764705882353], [453.0, 18422.714285714286], [452.0, 7131.3], [478.0, 10403.644067796613], [479.0, 12.875], [477.0, 18273.64285714286], [476.0, 10248.895522388062], [475.0, 7798.310344827586], [474.0, 7053.785714285715], [473.0, 13949.836956521738], [472.0, 7127.166666666666], [470.0, 11366.562499999998], [465.0, 21857.999999999996], [464.0, 13106.299999999997], [467.0, 12629.393700787405], [466.0, 7049.25], [482.0, 17539.4], [483.0, 11167.5], [492.0, 9226.234146341463], [493.0, 8937.12442396313], [494.0, 6841.739130434782], [495.0, 5259.7037037037035], [484.0, 23115.454545454544], [485.0, 15446.627906976742], [486.0, 6074.555555555556], [487.0, 6781.4800000000005], [481.0, 651.085714285714], [480.0, 11611.762711864409], [488.0, 12820.58333333333], [489.0, 10890.65765765766], [490.0, 4785.0], [491.0, 6380.666666666667], [496.0, 5683.0], [497.0, 6817.839999999999], [498.0, 7651.263157894739], [499.0, 9274.817073170738], [500.0, 9721.554275741708], [1.0, 450.0]], "isOverall": false, "label": "configuration_3", "isController": false}, {"data": [[398.1726999999999, 11065.569699999956]], "isOverall": false, "label": "configuration_3-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 853.0333333333333, "minX": 1.71293196E12, "maxY": 46366.88333333333, "series": [{"data": [[1.71293202E12, 46366.88333333333], [1.7129322E12, 7405.483333333334], [1.71293226E12, 1255.1], [1.71293208E12, 31833.6], [1.71293214E12, 8688.766666666666], [1.71293196E12, 8157.666666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71293202E12, 5167.916666666667], [1.7129322E12, 4979.516666666666], [1.71293226E12, 853.0333333333333], [1.71293208E12, 5238.566666666667], [1.71293214E12, 1611.8666666666666], [1.71293196E12, 4050.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71293226E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3826.343558282202, "minX": 1.71293196E12, "maxY": 25040.776315789462, "series": [{"data": [[1.71293202E12, 9741.945785239579], [1.7129322E12, 13533.113385826788], [1.71293226E12, 3826.343558282202], [1.71293208E12, 10581.315438871463], [1.71293214E12, 25040.776315789462], [1.71293196E12, 6095.743429286602]], "isOverall": false, "label": "configuration_3", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71293226E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3826.3374233128834, "minX": 1.71293196E12, "maxY": 25015.372368421045, "series": [{"data": [[1.71293202E12, 9739.3938440014], [1.7129322E12, 13526.886614173243], [1.71293226E12, 3826.3374233128834], [1.71293208E12, 10578.012539184945], [1.71293214E12, 25015.372368421045], [1.71293196E12, 6095.643304130173]], "isOverall": false, "label": "configuration_3", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71293226E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.09202453987730061, "minX": 1.71293196E12, "maxY": 23.598684210526315, "series": [{"data": [[1.71293202E12, 2.4770898915704835], [1.7129322E12, 2.090813648293963], [1.71293226E12, 0.09202453987730061], [1.71293208E12, 3.2637147335423147], [1.71293214E12, 23.598684210526315], [1.71293196E12, 0.3003754693366705]], "isOverall": false, "label": "configuration_3", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71293226E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 363.0, "minX": 1.71293196E12, "maxY": 530.0, "series": [{"data": [[1.71293226E12, 485.0], [1.71293196E12, 530.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71293226E12, 485.0], [1.71293196E12, 502.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71293226E12, 485.0], [1.71293196E12, 529.63]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71293226E12, 485.0], [1.71293196E12, 511.05000000000007]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.71293226E12, 436.0], [1.71293196E12, 363.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71293226E12, 450.0], [1.71293196E12, 433.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71293226E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 62461.0, "series": [{"data": [[8.0, 400.0], [16.0, 408.5], [1.0, 485.0], [2.0, 443.0], [17.0, 414.0], [35.0, 530.0], [9.0, 405.0], [10.0, 395.0], [21.0, 497.5], [24.0, 471.0], [25.0, 447.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 622.0], [3.0, 3426.5], [4.0, 2.0], [5.0, 8437.0], [6.0, 62461.0], [7.0, 418.0], [9.0, 21241.0], [10.0, 578.5], [12.0, 337.5], [15.0, 59982.0], [16.0, 1240.0], [17.0, 1481.0], [18.0, 8.0], [21.0, 8.0], [22.0, 14926.0], [24.0, 537.0], [25.0, 2085.0], [30.0, 1152.5], [31.0, 706.0], [35.0, 2096.0], [34.0, 920.0], [36.0, 367.0], [41.0, 4.0], [42.0, 5708.0], [45.0, 13.0], [46.0, 2816.5], [55.0, 12094.0], [58.0, 3916.5], [61.0, 4887.0], [60.0, 5686.0], [73.0, 5440.0], [82.0, 7563.0], [81.0, 8604.0], [84.0, 10396.0], [85.0, 6490.0], [87.0, 5475.0], [88.0, 9587.0], [91.0, 14665.0], [90.0, 4559.0], [94.0, 10831.0], [97.0, 7258.0], [98.0, 9786.0], [96.0, 7230.0], [103.0, 5227.0], [100.0, 6090.0], [104.0, 4751.5], [109.0, 9026.0], [110.0, 7109.0], [118.0, 7122.0], [117.0, 7198.0], [121.0, 5207.0], [123.0, 16125.5], [124.0, 8378.0], [126.0, 9510.0], [128.0, 7476.0], [133.0, 9172.0], [143.0, 8134.0], [138.0, 6831.5], [137.0, 7071.0], [136.0, 7151.0], [145.0, 6573.5], [149.0, 8794.0], [146.0, 7019.0], [148.0, 7080.5], [158.0, 6809.0], [154.0, 7129.0], [159.0, 7227.0], [155.0, 7224.0], [162.0, 7085.5], [160.0, 7157.0], [169.0, 7168.0], [171.0, 7015.0], [173.0, 7047.0], [180.0, 7023.5], [189.0, 7104.0], [192.0, 7112.0], [226.0, 52231.0], [1.0, 13817.0], [391.0, 46508.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 391.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 62461.0, "series": [{"data": [[8.0, 400.0], [16.0, 408.5], [1.0, 485.0], [2.0, 443.0], [17.0, 414.0], [35.0, 530.0], [9.0, 405.0], [10.0, 395.0], [21.0, 497.5], [24.0, 471.0], [25.0, 447.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 622.0], [3.0, 3423.5], [4.0, 0.0], [5.0, 8437.0], [6.0, 62461.0], [7.0, 416.5], [9.0, 21240.5], [10.0, 578.5], [12.0, 334.5], [15.0, 59982.0], [16.0, 1240.0], [17.0, 1481.0], [18.0, 0.0], [21.0, 0.0], [22.0, 14926.0], [24.0, 537.0], [25.0, 2085.0], [30.0, 1152.5], [31.0, 706.0], [35.0, 2096.0], [34.0, 920.0], [36.0, 363.5], [41.0, 0.0], [42.0, 5708.0], [45.0, 0.0], [46.0, 2816.5], [55.0, 12094.0], [58.0, 3916.5], [61.0, 4887.0], [60.0, 5686.0], [73.0, 5440.0], [82.0, 7563.0], [81.0, 8604.0], [84.0, 10396.0], [85.0, 6490.0], [87.0, 5475.0], [88.0, 9587.0], [91.0, 14665.0], [90.0, 4559.0], [94.0, 10831.0], [97.0, 7258.0], [98.0, 9786.0], [96.0, 7230.0], [103.0, 5227.0], [100.0, 6090.0], [104.0, 4751.5], [109.0, 9026.0], [110.0, 7109.0], [118.0, 7122.0], [117.0, 7198.0], [121.0, 5205.0], [123.0, 16125.5], [124.0, 8378.0], [126.0, 9510.0], [128.0, 7476.0], [133.0, 9172.0], [143.0, 8134.0], [138.0, 6831.5], [137.0, 7071.0], [136.0, 7151.0], [145.0, 6573.5], [149.0, 8794.0], [146.0, 7019.0], [148.0, 7080.5], [158.0, 6809.0], [154.0, 7129.0], [159.0, 7227.0], [155.0, 7224.0], [162.0, 7085.5], [160.0, 7157.0], [169.0, 7168.0], [171.0, 7015.0], [173.0, 7047.0], [180.0, 7023.5], [189.0, 7104.0], [192.0, 7112.0], [226.0, 52231.0], [1.0, 13817.0], [391.0, 46508.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 391.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.7129319E12, "maxY": 48.03333333333333, "series": [{"data": [[1.71293202E12, 48.03333333333333], [1.7129319E12, 0.06666666666666667], [1.7129322E12, 27.883333333333333], [1.71293226E12, 2.8666666666666667], [1.71293208E12, 41.78333333333333], [1.71293214E12, 11.966666666666667], [1.71293196E12, 34.06666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71293226E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.71293196E12, "maxY": 27.266666666666666, "series": [{"data": [[1.71293202E12, 25.683333333333334], [1.7129322E12, 27.266666666666666], [1.71293226E12, 5.433333333333334], [1.71293208E12, 24.583333333333332], [1.71293214E12, 7.683333333333334], [1.71293196E12, 22.7]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71293202E12, 7.233333333333333], [1.7129322E12, 4.366666666666666], [1.71293208E12, 8.783333333333333], [1.71293214E12, 2.5833333333333335], [1.71293196E12, 3.1]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.71293202E12, 14.733333333333333], [1.71293208E12, 9.166666666666666], [1.71293214E12, 2.4], [1.71293196E12, 0.8333333333333334]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.7129322E12, 0.08333333333333333]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.7129322E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71293226E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.71293196E12, "maxY": 47.65, "series": [{"data": [[1.71293226E12, 0.05], [1.71293196E12, 2.2666666666666666]], "isOverall": false, "label": "configuration_3-success", "isController": false}, {"data": [[1.71293202E12, 47.65], [1.7129322E12, 31.75], [1.71293226E12, 5.383333333333334], [1.71293208E12, 42.53333333333333], [1.71293214E12, 12.666666666666666], [1.71293196E12, 24.366666666666667]], "isOverall": false, "label": "configuration_3-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71293226E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.71293196E12, "maxY": 47.65, "series": [{"data": [[1.71293226E12, 0.05], [1.71293196E12, 2.2666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71293202E12, 47.65], [1.7129322E12, 31.75], [1.71293226E12, 5.383333333333334], [1.71293208E12, 42.53333333333333], [1.71293214E12, 12.666666666666666], [1.71293196E12, 24.366666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71293226E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

